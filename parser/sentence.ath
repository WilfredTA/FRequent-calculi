load "./lex.ath"
load "../sequent-calculus.ath"
load "./utils.ath"
open SequentCalculus

module SentenceParser {
    (define 
        (parse-iff tokens) := match (parse-imp tokens) {
            [lhs rest] => match rest {
                (list-of IFF rest') => match (parse-iff rest') {
                    [rhs rest''] => [(Iff lhs rhs) rest'']
                    | _ => (parse-error "Expected bi-implication" rest')
                }
                | _ => [lhs rest]
            }
        }
        (parse-imp tokens) := match (parse-or tokens) {
            [lhs rest] => match rest {
                (list-of IMPLIES rest') => match (parse-imp rest') {
                    [rhs rest''] => [(Imp lhs rhs) rest'']
                }
                | _ => [lhs rest]
            }
        }

        (parse-or tokens) := match (parse-and tokens) {
            [lhs rest] => match rest {
                (list-of OR rest') => match (parse-and rest') {
                    [rhs rest''] => [(Or lhs rhs) rest'']
                    | _ => (parse-error "Expected disjunction" rest')
                }
                | _ => [lhs rest]
            }
        }
        (parse-and tokens) :=  match (parse-neg tokens) {
            [lhs rest] => match rest {
                (list-of AND rest') => match (parse-neg rest') {
                    [rhs rest''] => [(And lhs rhs) rest'']
                    | _ => (parse-error "Expected conjunction" rest')
                }
                | _ => [lhs rest]
            }
        }
        (parse-neg tokens) := match tokens {
            (list-of NOT rest) => match (parse-neg rest) {
                [p rest'] => [(Neg p) rest']
            }
            | _ => (parse-atom tokens)
        }
        (parse-atom tokens) := match tokens {
            (list-of (VAR x) rest) => [(Atom x) rest]
            | (list-of BOT rest) => [Bot rest]
            | (list-of TOP rest) => [Top rest]
            | (list-of LPAREN rest) => match (parse-iff rest) {
                [f1 (list-of RPAREN rest')] => [f1 rest']
                | _ => (parse-error "Expected closing parenthesis" rest)
            }
            | _ => ['none tokens]
        }

    )

    define (parse-sentence tokens) := match (parse-iff tokens) {
        [x rest] => [x rest]
    }



}


